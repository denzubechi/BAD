// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  address           String   @unique 
  universalAddress  String?  
  subAccountAddress String?  
  subAccountFactory String?
  subAccountFactoryData String?
  username          String?  @unique
  email             String?
  bio               String?
  avatar            String?
  isCreator         Boolean  @default(false)
  isPremium         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  articles          Article[]
  subscriptions     Subscription[]
  spendPermissions  SpendPermission[]
  creatorProfile    CreatorProfile?
}

model CreatorProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName     String
  description     String?
  subscriptionPrice String // Price in wei
  tokenAddress    String   // ERC20 token address for payments
  subscriberCount Int      @default(0)
  articleCount    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  subscribers     Subscription[]
}

model Article {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId    String   @db.ObjectId
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  coverImage  String?
  status      ArticleStatus @default(DRAFT)
  isPremium   Boolean  @default(false)
  viewCount   Int      @default(0)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Subscription {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  subscriberId      String   @db.ObjectId
  subscriber        User     @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  creatorId         String   @db.ObjectId
  creator           CreatorProfile @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  status            SubscriptionStatus @default(ACTIVE)
  startDate         DateTime @default(now())
  endDate           DateTime?
  lastRenewalDate   DateTime?
  nextRenewalDate   DateTime?
  spendPermissionHash String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([subscriberId, creatorId])
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

model SpendPermission {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionHash  String   @unique
  spender         String   // Spender address
  token           String   // Token address
  allowance       String   // Allowance in wei
  period          Int      // Period in days
  start           String   // Start timestamp as string for MongoDB
  end             String   // End timestamp as string for MongoDB
  salt            String   // Salt as string for MongoDB
  extraData       String?
  status          PermissionStatus @default(ACTIVE)
  permissionType  PermissionType
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum PermissionStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum PermissionType {
  CREATOR_SUBSCRIPTION
  PLATFORM_PREMIUM
}
